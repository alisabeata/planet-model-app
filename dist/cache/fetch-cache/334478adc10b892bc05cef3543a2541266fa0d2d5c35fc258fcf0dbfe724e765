{"kind":"FETCH","data":{"headers":{"connection":"keep-alive","content-type":"text/plain; charset=utf-8","date":"Sun, 25 Aug 2024 11:32:42 GMT","server":"nginx","strict-transport-security":"max-age=31536000; includeSubDomains; preload","transfer-encoding":"chunked","x-frame-options":"SAMEORIGIN"},"body":"","status":200,"url":"https://ssd.jpl.nasa.gov/horizons_batch.cgi?batch=1&COMMAND=499&OBJ_DATA=%27YES%27&MAKE_EPHEM=%27YES%27&EPHEM_TYPE=%27OBSERVER%27&CENTER=%27500@399%27&START_TIME=%272024-08-25T00:00%27&STOP_TIME=%272024-08-25T00:01%27&STEP_SIZE=%271m%27&TIME_ZONE=%27+01:00%27"},"revalidate":31536000,"tags":[]}